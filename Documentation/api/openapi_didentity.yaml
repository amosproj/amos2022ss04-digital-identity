openapi: 3.0.3
info:
  version: 0.7.4
  title: "Digital Identity - Backend API"
  description: "This API describes how the DIdentity Server behaves. It manages the user data, their processing as well as their storage. It also offers other functions, such as the validation of digital identities."
  # TODO
  #termsOfService: hallo
  #contact:
  #  name: tbd
  #  url: tbd
  #  email: blank@test.de
  #license:
  #  name: license-name
  #  url: tbd

servers:
  - url: http://localhost:8080
    description: Backend Server
  - url: http://localhost:8080/user/{id}
    description: Backend Server

  #- url: http://localhost:4242
  #  description: Frontend Service

paths:
  /auth/login:
    post:
      tags:
        - authentification-controller
      description: Check whether there is a valid username + password combination to get a JWT (JSON Web Token).
      parameters:
        - name: e_mail
          in: "query"
          schema:
            type: string
          description: The e-mail adress of the user.
          example: john.doe@example.org

        - name: password
          in: "query"
          schema:
            type: string
          description: The e-mail adress of the new user. This will be used later on for login.
          example: Wm7&+TpZcw9>U3qV

      responses: # This will need to return a JWT in a later version / sprint and + returns the id of the current user
        200:
          description: Login successful. / Password and username do not match.
        400:
          description: Bad Request.
  /auth/password/change:
    post:
      tags:
        - authentification-controller
      description: Change password of a connection. Referenced via email.
      parameters:
        - name: authorization
          in: "query"
          required: false
          schema: 
            type: "string"
            example: "admin"
        - name: email
          in: "query"
          required: true
          schema: 
            type: "string"
            example: "myMail@example.org"
        - name: old_password
          in: "query"
          required: true
          schema: 
            type: "string"
            example: "old-password-12345"
        - name: new_password
          in: "query"
          required: true
          schema: 
            type: "string"
            example: "new-password-12345"
      responses:
        200:
          description: Successful creation of the digital identity.
        400:
          description: Bad Request.
        401:
          description: Unauthorized. Token not found.
        403:
          description: Forbidden. Mismatch of user and password. User might not exists or the password not matching.
        500:
          description: Internal server error.

  /connection/create:
    post:
      tags:
        - connection-controller
      description: Create a new user entry in the database.
      parameters:
        - name: name
          in: "query"
          schema:
            type: string
          description: The name of the new user.
          example: John
          required: true

        - name: surname
          in: "query"
          schema:
            type: string
          description: The surrname of the new user.
          example: Doe
          required: true

        - name: email
          in: "query"
          schema:
            type: string
          description: The email adress of the new user. This will be used later on for login.
          example: john.doe@example.org
          required: true

        - name: user_role
          in: "query"
          schema:
            type: string
            enum: [employee, guest, "HR employee", admin]
          description: This is the role of the user in the system.
          example: "employee"
          required: false
        
        - name: authorization
          in: "query"
          required: false
          schema: 
            type: "string"
            example: "admin"

      # TODO for a later sprint: add login-session
      # see comments below /database/query for more info

      responses:
        200:
          description: Successful creation of the digital identity.
        400:
          description: Bad Request.
        401:
          description: Unauthorized. Token not found.
        403:
          description: Forbidden.
        500:
          description: Internal server error.

  /connection/update:
    post:
      tags:
        - connection-controller
      responses:
        200:
          description: Update successful.
        400:
          description: Bad Request.
        401:
          description: Unauthorized. Token not found.
        403:
          description: Forbidden.
        500:
          description: User role not recognized.
          
  /connection/remove:
    post:
      tags:
        - connection-controller
      parameters:
        - name: id
          in: "query"
          schema:
            type: string
          description: The id of the user to remove.
          example: 2
          required: true
      responses:
        200:
          description: Removal successful.
        400:
          description: Bad Request.
        401:
          description: Unauthorized. Token not found.
        403:
          description: Forbidden.
        500:
          description: User not found.


  /connection/all:
    get:
      tags:
        - connection-controller
      summary: Get a list of all connections.
      description: Get a list of all connections. Use authorization = passing or authorization = admin for bypassing the authorization check.
      parameters:
        - name: authorization
          in: "query"
          required: false
          schema: 
            type: "string"
            example: "admin"

      responses: # This will need to return a JWT in a later version / sprint and + returns the id of the current user
        200:
          description: Has returned all recorded connections successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schema/Connection"
        401:
          description: Unauthorized, missing authentification.
        403:
          description: Forbidden.
        404:
          description: Not Found.

  /connection/{id}:
    get:
      tags:
        - connection-controller
      description: Get user data of digital identity
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Success.
        400:
          description: Bad Request.
        401:
          description: Unauthorized. Token not found.
        403:
          description: Forbidden.
        404:
          description: Not Found.
        500:
          description: Internal server error.

  /connection/{id}/qr:
    get:
      tags:
        - connection-controller
      description: Get the (lissy)-QR image
      responses:
        200:
          description: Success.
        400:
          description: Bad Request.
        401:
          description: Unauthorized. Token not found.
        500:
          description: Internal server error.

  /schema/create:
    post:
      tags:
        - schema-controller
      description: create a new schema and save it to the lissi API
      parameters:
        - name: authorization
          in: "query"
          required: false
          schema:
            type: string
            example: admin

        - name: alias
          in: "query"
          required: true
          schema:
            type: string
            example: id-card

        - name: version
          in: "query"
          required: true
          schema:
            type: string
            example: 1.0.0

        - name: attributes
          in: "query"
          required: true
          schema:
            type: string
            example: '"attr1", "attr2", "attr3"'
      responses:
        201:
          description: Succesfully created a new schema
        401:
          description: Unauthorized, missing authentification
        403:
          description: Forbidden.
        404:
          description: Not found.
        500:
          description: Could not create a new schmema

  /schema/{id}:
    post:
      tags:
        - schema-controller
      description: update a schema via the lissi API
      responses:
        200:
          description: OK.
    get:
      tags:
        - schema-controller
      description: get a schema via the lissi API
      responses:
        200:
          description: OK.

  /schema/all:
    get:
      tags:
        - schema-controller
      description: get all schemas via the lissi API
      responses:
        200:
          description: OK.

  /schema/challenge/send:
    post:
      tags:
        - schema-controller
      description: create a new schema and save it to the lissi API
      parameter:
        - name: userid
          in: "query"
          required: true
          schema:
            type: integer

        - name: schemaid
          in: "query"
          required: true
          schema:
            type: integer
      responses:
        200:
          description: OK.

  /schema/challenge/pending:
    get:
      tags:
        - schema-controller
      description: create a new schema and save it to the lissi API
      parameter:
        - name: userid
          in: "query"
          required: true
          schema:
            type: integer
      responses:
        200:
          description: OK.

  /schema/challenge/answered:
    get:
      tags:
        - schema-controller
      description: create a new schema and save it to the lissi API
      parameter:
        - name: userid
          in: "query"
          required: true
          schema:
            type: integer
      responses:
        200:
          description: OK.
  
  /credential-definition/create:
    post:
      tags:
        - credential-definition
      description: Create a new credential definition and save it to the ledger via the lissi api. 
      summary: Create a new credential definition.
      parameters:
        - name: authorization
          in: "query"
          required: false
          schema:
            type: string
            example: admin

        - name: alias
          in: "query"
          required: true
          schema:
            type: string
            example: "Driving Licence"

        - name: comment
          in: "query"
          required: true
          schema:
            type: string
            example: "Description of the credential."

        - name: schemaID
          in: "query"
          required: true
          schema:
            type: string
            example: 'schemaId'
        
      responses:
        201:
          description: Succesfully created a new credential. # todo: add credential-definition
        400:
          description: Bad Request.
        401:
          description: Unauthorized, missing authentification
        403:
          description: Forbidden.
        500:
          description: Could not create a new credential definition.


  /database/query:
    get:
      description: Pull data from the database
      deprecated: true
      responses:
        200:
          description: Successful pull from database.
        400:
          description: Bad Request.
        401:
          description: Unauthorized. Token not found.

  # This will need use a JWT in a later version / sprint in order to manage whether someone is logged in  This can expire. Therefore there needs to be a response which tells the client to update the JWT. This can be done via a /auth/refreshtolen POST request

components:
  schema:
    Connection:
      type: object
      properties:
        id:
          type: integer
          example: 4
        name:
          type: string
          example: "John"
        surname:
          type: string
          example: "Doe"
        email:
          type: string
          example: "john.doe@example.org"
        openCredentials:
          type: integer
          example: 2
        openProofs:
          type: integer
          example: 72
        coonectionActive:
          type: boolean
          example: true
        details:
          type: array
          items:
            type: string
            example: "key: value"

          # type: object
          # example: "[brithday: 01.01.1980, company: Friedrich-Alexander Universitaet Erlangen-Nuernberg,            userRole: EMPLOYEE, team: Lehrstul 42]"
