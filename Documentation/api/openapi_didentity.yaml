openapi: 3.0.3
info:
  version: 0.10.1
  title: "Digital Identity - Backend API"
  description: "This API describes how the DIdentity Server behaves. It manages the user data, their processing as well as their storage. It also offers other functions, such as the validation of digital identities."
  # TODO
  #termsOfService: hallo
  #contact:
  #  name: tbd
  #  url: tbd
  #  email: blank@test.de
  #license:
  #  name: license-name
  #  url: tbd

servers:
  - url: http://localhost:8080
    description: Backend Server

  #- url: http://localhost:4242
  #  description: Frontend Service

paths:
  /auth/login:
    post:
      tags:
        - authentication-controller
      description: Check whether there is a valid username + password combination to get a JWT (JSON Web Token).
      parameters:
        - name: e_mail
          in: "query"
          schema:
            type: string
          description: The e-mail adress of the user.
          example: john.doe@example.org

        - name: password
          in: "query"
          schema:
            type: string
          description: The e-mail adress of the new user. This will be used later on for login.
          example: Wm7&+TpZcw9>U3qV

      responses: # This will need to return a JWT in a later version / sprint and + returns the id of the current user
        200:
          description: Login successful. / Password and username do not match.
        400:
          description: Bad Request.
  /auth/password/change:
    post:
      tags:
        - authentification-controller
      description: Change password of a connection. Referenced via email.
      parameters:
        - name: authorization
          in: "query"
          required: false
          schema:
            type: "string"
            example: "admin"
        - name: email
          in: "query"
          required: true
          schema:
            type: "string"
            example: "myMail@example.org"
        - name: old_password
          in: "query"
          required: true
          schema:
            type: "string"
            example: "old-password-12345"
        - name: new_password
          in: "query"
          required: true
          schema:
            type: "string"
            example: "new-password-12345"
      responses:
        200:
          description: Successful creation of the digital identity.
        400:
          description: Bad Request.
        401:
          description: Unauthorized. Token not found.
        403:
          description: Forbidden. Mismatch of user and password. User might not exists or the password not matching.
        500:
          description: Internal server error.

  /auth/password/forgot:
    post:
      tags:
        - authentification-controller
      summary: Reset the password of a connection.
      description: Reset the password of a connection (referenced via email). Sends a new password via email to the user behind the connection.
      parameters:
        - name: email
          in: "query"
          required: true
          schema:
            type: "string"
            example: "myMail@example.org"
      responses:
        200:
          description: Password was reset.
        400:
          description: Bad Request.
        500:
          description: Internal server error.

  /connection/create:
    post:
      tags:
        - connection-controller
      description: Create a new user entry in the database.
      parameters:
        - name: name
          in: "query"
          schema:
            type: string
          description: The name of the new user.
          example: John
          required: true

        - name: surname
          in: "query"
          schema:
            type: string
          description: The surrname of the new user.
          example: Doe
          required: true

        - name: email
          in: "query"
          schema:
            type: string
          description: The email adress of the new user. This will be used later on for login.
          example: john.doe@example.org
          required: true

        - name: user_role
          in: "query"
          schema:
            type: string
            enum: [employee, guest, "HR employee", admin]
          description: This is the role of the user in the system.
          example: "employee"
          required: false

        - name: authorization
          in: "query"
          required: false
          schema:
            type: "string"
            example: "admin"

      # TODO for a later sprint: add login-session
      # see comments below /database/query for more info

      responses:
        201:
          description: Successful creation of the digital identity.
        400:
          description: Bad Request.
        401:
          description: Unauthorized. Token not found.
        403:
          description: Forbidden.
        500:
          description: Internal server error.

  /connection/update:
    post:
      tags:
        - connection-controller
      responses:
        200:
          description: Update successful.
        400:
          description: Bad Request.
        401:
          description: Unauthorized. Token not found.
        403:
          description: Forbidden.
        500:
          description: User role not recognized.

  /connection/remove:
    post:
      tags:
        - connection-controller
      parameters:
        - name: connectionId
          in: "query"
          schema:
            type: string
          description: The connectionId of the user to remove.
          example: 2
          required: true
      responses:
        200:
          description: Removal successful.
        400:
          description: Bad Request.
        401:
          description: Unauthorized. Token not found.
        403:
          description: Forbidden.
        500:
          description: User not found.

  /connection/all:
    get:
      tags:
        - connection-controller
      summary: Get a list of all connections.
      description: Get a list of all connections. Use authorization = passing or authorization = admin for bypassing the authorization check.
      parameters:
        - name: authorization
          in: "query"
          required: false
          schema:
            type: "string"
            example: "admin"

      responses: # This will need to return a JWT in a later version / sprint and + returns the id of the current user
        200:
          description: Has returned all recorded connections successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Connection"
        401:
          description: Unauthorized, missing authentification.
        403:
          description: Forbidden.
        404:
          description: Not Found.

  /connection/{id}:
    get:
      tags:
        - connection-controller
      description: Get user data of digital identity
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Success.
        400:
          description: Bad Request.
        401:
          description: Unauthorized. Token not found.
        403:
          description: Forbidden.
        404:
          description: Not Found.
        500:
          description: Internal server error.

  /connection/{id}/qr:
    get:
      tags:
        - connection-controller
      description: Get the (lissy)-QR image
      responses:
        200:
          description: Success.
        400:
          description: Bad Request.
        401:
          description: Unauthorized. Token not found.
        500:
          description: Internal server error.

  /schema/create:
    post:
      tags:
        - schema-controller
      description: create a new schema and save it to the lissi API
      parameters:
        - name: authorization
          in: "query"
          required: false
          schema:
            type: string
            example: admin

        - name: alias
          in: "query"
          required: true
          schema:
            type: string
            example: id-card

        - name: version
          in: "query"
          required: true
          schema:
            type: string
            example: 1.0.0

        - name: attributes
          in: "query"
          required: true
          schema:
            type: string
            example: '"attr1", "attr2", "attr3"'
      responses:
        201:
          description: Succesfully created a new schema.
        400:
          description: Bad Request.
        401:
          description: Unauthorized, missing authentification
        403:
          description: Forbidden.
        500:
          description: Could not create a new schmema

  /schema/{id}:
    post:
      deprecated: true
      tags:
        - schema-controller
      description: update a schema via the lissi API
      responses:
        200:
          description: OK.
    get:
      deprecated: true
      tags:
        - schema-controller
      description: get a schema via the lissi API
      responses:
        200:
          description: OK.

  /schema/all:
    get:
      summary: Get a list of all connections.
      description: Returns a list of the stored schema definitions. The schemas are pulled from the lissi api (and therefore the ledger).
      parameters:
        - name: activeState
          in: query
          description: State of the schema (active vs. archived).
          required: false
          schema:
            type: boolean
            example: false
        - name: schemaSearchText
          in: query
          description: Text to search for within the schemas.
          required: false
          schema:
            type: string

      tags:
        - schema-controller
      responses:
        200:
          description: Returns all schemas in a List.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Schema"
        400:
          description: Bad Request.
        401:
          description: Unauthorized, missing authentification.
        403:
          description: Forbidden.
        500:
          description: Internal Server Error during request. Lissi API might be not available.

  /schema/challenge/send:
    post:
      deprecated: true
      tags:
        - schema-controller
      description: create a new schema and save it to the lissi API
      parameter:
        - name: userid
          in: "query"
          required: true
          schema:
            type: integer

        - name: schemaid
          in: "query"
          required: true
          schema:
            type: integer
      responses:
        200:
          description: OK.

  /schema/challenge/pending:
    get:
      deprecated: true
      tags:
        - schema-controller
      description: create a new schema and save it to the lissi API
      parameter:
        - name: userid
          in: "query"
          required: true
          schema:
            type: integer
      responses:
        200:
          description: OK.

  /schema/challenge/answered:
    get:
      deprecated: true
      tags:
        - schema-controller
      description: create a new schema and save it to the lissi API
      parameter:
        - name: userid
          in: "query"
          required: true
          schema:
            type: integer
      responses:
        200:
          description: OK.

  /credential-definition/create:
    post:
      tags:
        - credential-definition-controller
      description: Create a new credential definition and save it to the ledger via the lissi api.
      summary: Create a new credential definition.
      parameters:
        - name: authorization
          in: "query"
          required: false
          schema:
            type: string
            example: admin

        - name: alias
          in: "query"
          required: true
          schema:
            type: string
            example: "Driving Licence"

        - name: comment
          in: "query"
          required: true
          schema:
            type: string
            example: "Description of the credential."

        - name: schemaID
          in: "query"
          required: true
          schema:
            type: string
            
        - name: revocable
          in: "query"
          required: true
          description: Can be true or false, not implemented yet in Lissi
          schema:
            type: string
            example: "false"
            
       responses:
          201:
             description: Credential definition successfully created.
          400:
            description: Bad Request.
          401:
            description: Unauthorized, missing authentification
          403:
            description: Forbidden.
          500:
            description: Could not create a new credential definition.
  
  /credential/all:
    get:
      tags:
        - credential-controller
      description: Get all credentials of a credential definition.
      summary: Get all credentials of a credential definition.
      parameters:
        - name: authorization
          in: "query"
          required: false
          schema:
            type: string
            example: admin

        - name: credentialDefinitionId
          in: "query"
          description: "ID of the credential definition"
          required: true
          schema:
            type: string
            example: "GCevMyEWCa5Fd58gfzkASy:3:CL:8768:Mitarbeiter Ausweis Adorsys"
          
        - name: page
          in: "query"
          description: "requested page. Default: 0"
          required: false
          schema:
            type: string
            example: "0"
        
        - name: size
          in: "query"
          description: "page size of each page. Default: 10"
          required: false
          schema:
            type: string
            example: "10"

      responses:
        200:
          description: Returns all credentials within the requested page.
          content:
            application/json:
              schema:
                  $ref: "#/components/schemas/PagedDtoCredentialIssuance"
        400:
          description: Bad Request.
        401:
          description: Unauthorized, missing authentification
        403:
          description: Forbidden.
        500:
          description: Internal Server Error.
          
  /credential/{id}:
    get:
      tags:
        - credential-controller
      description: Get all credentials of a credential definition.
      summary: Get all credentials of a credential definition.
      parameters:
        - name: authorization
          in: "query"
          required: false
          schema:
            type: string
            example: admin

        - name: id
          in: path
          description: "ID of given the credential id"
          required: true
          schema:
            type: string
            example: "id-credential"

      responses:
        200:
          description: Returns all credentials within the requested page.
          content:
            application/json:
              schema:
                  $ref: "#/components/schemas/PagedDtoCredentialIssuance"
        400:
          description: Bad Request.
        401:
          description: Unauthorized, missing authentification
        403:
          description: Forbidden.
        500:
          description: Internal Server Error.
          
  /credential/log:
    get:
      tags:
        - credential-controller
      description: Get all activity of a credential definition.
      summary: Get all activity of a credential definition.
      parameters:
        - name: authorization
          in: "query"
          required: false
          schema:
            type: string
            example: admin

        - name: credentialDefinitionId
          in: "query"
          description: "ID of the credential definition"
          required: true
          schema:
            type: string
            example: "GCevMyEWCa5Fd58gfzkASy:3:CL:8768:Mitarbeiter Ausweis Adorsys"
          
        - name: connectionSearchText
          in: "query"
          description: "Search Text "
          required: false
          schema:
            type: string
            example: "Hans Mueller"
        
        - name: page
          in: "query"
          description: "requested page. Default: 0"
          required: false
          schema:
            type: string
            example: "0"
        
        - name: size
          in: "query"
          description: "page size of each page. Default: 10"
          required: false
          schema:
            type: string
            example: "10"

      responses:
        200:
          description: Returns requested page of activities of given credential definition.
          content:
            application/json:
              schema:
                  $ref: "#/components/schemas/DtoPageDtoLogActivity"
        400:
          description: Bad Request.
        401:
          description: Unauthorized, missing authentification
        403:
          description: Forbidden.
        500:
          description: Internal Server Error.

  /credential/issue:
    post:
      tags:
        - credential-controller
      description: Issue a credential to an existing connection.
      summary: Issue a credential to an existing connection.
      parameters:
        - name: authorization
          in: "query"
          required: false
          schema:
            type: string
            example: admin

        - name: connectionId
          in: "query"
          description: "connectionId of existing connection"
          required: true
          schema:
            type: string
            example: "2fadafc4-dea5-427c-bc5e-0d3f5c567be7"

        - name: credentialDefinitionId
          in: "query"
          description: "credentialDefinitionId of existing credential"
          required: true
          schema:
            type: string
            example: "GCevMyEWCa5Fd58gfzkASy:3:CL:8768:Mitarbeiter Ausweis Adorsys"

      requestBody:
        description: attributes
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Attributes"

      responses:
        201:
          description: Returns Response JSON.
        400:
          description: Bad Request.
        401:
          description: Unauthorized, missing authentification
        403:
          description: Forbidden.
        500:
          description: Could not issue connection to credential.

  /credential-definition/all:
    get:
      tags:
        - credential-definition-controller
      description: Create a new credential definition and save it to the ledger via the lissi api.
      summary: Create a new credential definition.
      parameters:
        - name: authorization
          in: "query"
          required: false
          schema:
            type: string
            example: admin

        - name: activeState
          in: "query"
          required: false
          schema:
            type: boolean
            example: true

        - name: searchText
          in: "query"
          required: false
          schema:
            type: string
            example: "Ausweis"
      responses:
        200:
          description: Succesfully requested credential definitions. # todo: add credential-definition
        400:
          description: Bad Request.
        401:
          description: Unauthorized, missing authentification
        403:
          description: Forbidden.
        500:
          description: Internal Server Error.
  
  /presentation-proof/send:
    post:
      tags:
        - presentation-proof-controller
      description: Send a proof request to a connection.
      summary: Send a proof request to a connection.
      parameters:
        - name: authorization
          in: "query"
          required: false
          schema:
            type: string
            example: admin

        - name: connectionId
          in: "query"
          required: true
          schema:
            type: string
            example: connectionId

        - name: proofTemplateId
          in: "query"
          required: true
          schema:
            type: string
            example: proofTemplateId
      responses:
        201:
          description: Returns Response JSON.
        400:
          description: Bad Request.
        401:
          description: Unauthorized, missing authentification
        403:
          description: Forbidden.
        500:
          description: Could not send proof request to connection.

  # This will need use a JWT in a later version / sprint in order to manage whether someone is logged in  This can expire. Therefore there needs to be a response which tells the client to update the JWT. This can be done via a /auth/refreshtolen POST request
components:
  schemas:
    DtoNamedValueReq:
      type: object
      required:
        - name
        - value
      properties:
        name:
          type: string
          example: "Name"
        value:
          type: string
          example: "Max"
      title: DtoNamedValueReq
    DtoNamedValueRes:
      type: object
      required:
        - name
        - value
      properties:
        name:
          type: string
        value:
          type: string
      title: DtoNamedValueRes

    Connection:
      title: Connection
      type: object
      properties:
        id:
          type: integer
          example: 4
        name:
          type: string
          example: "John"
        surname:
          type: string
          example: "Doe"
        email:
          type: string
          example: "john.doe@example.org"
        openCredentials:
          type: integer
          example: 2
        openProofs:
          type: integer
          example: 72
        coonectionActive:
          type: boolean
          example: true
        details:
          type: array
          items:
            type: string
            example: "key: value"
    Schema:
      type: object
      properties:
        active:
          type: boolean
          example: true
        alias:
          type: string
          example: "myAlias"
        attributes:
          type: array
          items:
            type: string
            example: "attri1"
        id:
          type: string
          example: "string"
        imageUri:
          type: string
          example: "string"
        imported:
          type: boolean
          example: true
        version:
          type: string
          example:
            "1.0"
            # type: object
            # example: "[brithday: 01.01.1980, company: Friedrich-Alexander Universitaet Erlangen-Nuernberg,            userRole: EMPLOYEE, team: Lehrstul 42]"
    Attributes:
      type: object
      properties:
        attributes:
          type: array
          items:
            $ref: "#/components/schemas/DtoNamedValueReq"

    PagedDtoCredentialIssuance:
      type: object
      properties:
        content:
          type: array
          description: An array of the page's elements.
          items:
            $ref: "#/components/schemas/DtoCredentialIssuance"
        number:
          type: integer
          format: int32
          description: The number of the page returned.
        size:
          type: integer
          format: int32
          description: The size of the page returned.
        totalElements:
          type: integer
          format: int64
          description: The total number of elements available.
        totalPages:
          type: integer
          format: int32
          description: The total number of pages available.
      title: DtoPage«DtoCredentialIssuance»
  
    DtoCredentialIssuance:
      type: object
      required:
        - createdAt
        - credDefActive
        - credDefAlias
        - credDefId
        - id
        - state
      properties:
        connectionAlias:
          type: string
        connectionId:
          type: string
        connectionImageUri:
          type: string
        connectionTheirLabel:
          type: string
        createdAt:
          type: string
        credDefActive:
          type: boolean
        credDefAlias:
          type: string
        credDefId:
          type: string
        credDefImageUri:
          type: string
        id:
          type: string
        schemaId:
          type: string
        state:
          type: string
          enum:
            - CREDENTIAL_ISSUED
            - CREDENTIAL_OFFER_RECEIVED
            - CREDENTIAL_OFFER_SENT
            - CREDENTIAL_PROPOSAL_RECEIVED
            - CREDENTIAL_PROPOSAL_SENT
            - CREDENTIAL_RECEIVED
            - CREDENTIAL_REMOVED
            - CREDENTIAL_REQUEST_RECEIVED
            - CREDENTIAL_REQUEST_SENT
            - CREDENTIAL_REVOKED
            - CREDENTIAL_STORED
            - UNKNOWN
        updatedAt:
          type: string
      title: DtoCredentialIssuance
        
    DtoCredentialIssuanceDetails:
      type: object
      required:
        - issuance
      properties:
        attributes:
          type: array
          items:
            $ref: "#/components/schemas/DtoNamedValueRes"
        issuance:
          $ref: "#/components/schemas/DtoCredentialIssuance"
      title: DtoCredentialIssuanceDetails
 
    DtoLogActivity:
      type: object
      required:
        - id
        - referenceId
        - referenceImageUrl
        - referenceName
        - referenceState
        - referenceType
        - referenceTypeId
        - timestamp
      properties:
        connectionAlias:
          type: string
        connectionId:
          type: string
        connectionImageUri:
          type: string
        connectionLabel:
          type: string
        id:
          type: string
        referenceId:
          type: string
        referenceImageUrl:
          type: string
        referenceName:
          type: string
        referenceState:
          type: string
          enum:
            - CREDENTIAL_ISSUED
            - CREDENTIAL_OFFER_SENT
            - CREDENTIAL_REMOVED
            - CREDENTIAL_REVOKED
            - PRESENTATION_RECEIVED
            - PROOF_RECORD_REMOVED
            - REQUEST_SENT
            - VERIFIED
        referenceType:
          type: string
          enum:
            - CREDENTIAL_DEFINITION
            - PROOF_TEMPLATE
        referenceTypeId:
          type: string
        timestamp:
          type: string
      title: DtoLogActivity
 
    DtoPageDtoLogActivity:
      type: object
      properties:
        content:
          type: array
          description: An array of the page's elements.
          items:
            $ref: "#/components/schemas/DtoLogActivity"
        number:
          type: integer
          format: int32
          description: The number of the page returned.
        size:
          type: integer
          format: int32
          description: The size of the page returned.
        totalElements:
          type: integer
          format: int64
          description: The total number of elements available.
        totalPages:
          type: integer
          format: int32
          description: The total number of pages available.
      title: DtoPage«DtoLogActivity»
