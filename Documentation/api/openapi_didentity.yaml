openapi: 3.0.3
info:
  version: 0.5.2
  title: "Digital Identity - Backend API"
  description: "This API describes how the DIdentity Server behaves. It manages the user data, their processing as well as their storage. It also offers other functions, such as the validation of digital identities."
  # TODO
  #termsOfService: hallo
  #contact:
  #  name: tbd
  #  url: tbd
  #  email: blank@test.de
  #license:
  #  name: license-name
  #  url: tbd

servers:
  - url: http://localhost:8080
    description: Backend Server

  #- url: http://localhost:4242
  #  description: Frontend Service

paths:
  /auth/register:
    post:
      tags:
        - authentification-controller
      description: Create a new user entry in the database.
      parameters:
        - name: name
          in: "query"
          schema:
            type: string
          description: The name of the new user.
          example: John

        - name: surname
          in: "query"
          schema:
            type: string
          description: The surrname of the new user.
          example: Doe

        - name: birthday
          in: "query"
          schema:
            type: string
            format: date
          description: The birthday of the new user.
          example: 01.01.1980

        - name: email
          in: "query"
          schema:
            type: string
          description: The email adress of the new user. This will be used later on for login.
          example: john.doe@example.org

        - name: company
          in: "query"
          schema:
            type: string
          description: The company the user works at.
          example: "Friedrich-Alexander Universitaet Erlangen-Nuernberg"

        - name: user_role
          in: "query"
          schema:
            type: string
            enum: [employee, guest, "HR employee", admin]
          description: This is the role of the user in the system.
          example: "employee"

        - name: team
          in: "query"
          required: false
          schema:
            type: string
          description: The team the user belongs to.
          example: "Lehrstul 42"

      # TODO for a later sprint: add login-session
      # see comments below /database/query for more info

      responses:
        201:
          description: Successful creation of the user.
        400:
          description: Bad Request.
        401:
          description: Unauthorized. Token not found or not valid.

  /auth/login:
    post:
      tags:
        - authentification-controller
      description: Check whether there is a valid username + password combination to get a JWT (JSON Web Token).
      parameters:
        - name: e_mail
          in: "query"
          schema:
            type: string
          description: The e-mail adress of the user.
          example: john.doe@example.org

        - name: password
          in: "query"
          schema:
            type: string
          description: The e-mail adress of the new user. This will be used later on for login.
          example: Wm7&+TpZcw9>U3qV

      responses: # This will need to return a JWT in a later version / sprint and + returns the id of the current user
        200:
          description: Successful login.
        400:
          description: Bad Request.
        401:
          description: Unauthorized. Token not found or not valid.

  /auth/update:
    post:
      tags:
        - authentification-controller

  /connection/create:
    post:
      tags:
        - connection-controller
      description: create new user on the lissi blockchain
      parameters:
        - name: name
          in: "query"
          required: true
          schema:
            type: string

        - name: surname
          in: "query"
          required: true
          schema:
            type: string

        - name: email
          in: "query"
          required: true
          schema:
            type: string

        - name: email_body
          in: "query"
          schema:
            type: string

  /connection/{id}:
    get:
      tags:
        - connection-controller
      description: Get userdata of person
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer

    post:
      tags:
        - connection-controller
      description: Get userdata of person

  /connection/{id}/qr:
    get:
      tags:
        - connection-controller
      description: Get the (lissy)-QR image

  /connection/all:
    get:
      tags:
        - connection-controller
      summary: Get a list of all connections.
      description: Get a list of all connections.

      responses: # This will need to return a JWT in a later version / sprint and + returns the id of the current user
        200:
          description: Has returned all recorded connections successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Connection"
        401:
          description: Unauthorized, missing authentification.
        403:
          description: Forbidden
        404:
          description: Not Found

  /schema/create:
    post:
      tags:
        - schema-controller
      description: create a new schema and save it to the lissi API

  /schema/{id}:
    post:
      tags:
        - schema-controller
      description: update a schema via the lissi API
    get:
      tags:
        - schema-controller
      description: get a schema via the lissi API

  /schema/all:
    get:
      tags:
        - schema-controller
      description: get all schemas via the lissi API

  /schema/challange/send:
    post:
      tags:
        - schema-controller
      description: create a new schema and save it to the lissi API
      parameter:
        - name: userid
          in: "query"
          required: true
          schema:
            type: integer

        - name: schemaid
          in: "query"
          required: true
          schema:
            type: integer

  /schema/challange/pending:
    get:
      tags:
        - schema-controller
      description: create a new schema and save it to the lissi API
      parameter:
        - name: userid
          in: "query"
          required: true
          schema:
            type: integer

  /schema/challange/answered:
    get:
      tags:
        - schema-controller
      description: create a new schema and save it to the lissi API
      parameter:
        - name: userid
          in: "query"
          required: true
          schema:
            type: integer

  /database/query:
    get:
      description: Pull data from the database
      deprecated: true
      responses:
        200:
          description: Successful pull from database.
        400:
          description: Bad Request.
        401:
          description: Unauthorized. Token not found or not valid.

  # This will need use a JWT in a later version / sprint in order to manage whether someone is logged in  This can expire. Therefore there needs to be a response which tells the client to update the JWT. This can be done via a /auth/refreshtolen POST request

components:
  schemas:
    Connection:
      type: object
      properties:
        id:
          type: integer
          example: 4
        name:
          type: string
          example: "John"
        surname:
          type: string
          example: "Doe"
        email:
          type: string
          example: "john.doe@example.org"
        open credential:
          type: integer
          example: 2
        open proof:
          type: integer
          example: 72
        coonection active:
          type: boolean
          example: true